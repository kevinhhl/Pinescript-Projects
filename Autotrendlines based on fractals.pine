// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© DojiEmoji

// https://www.tradingview.com/script/xYaiqwD8-Auto-Trendline-Indicator-based-on-fractals/
// A tool that automatically draws out trend lines by connecting the most recent fractals.

//@version=5
indicator("Auto Trendline [KL]", format=format.price, precision=0, overlay=true, max_lines_count=500)

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
// Fractals - Based on TradingView's built-in version
// https://www.tradingview.com/support/solutions/43000591663-williams-fractal/
// Modified to print only the confirmed fractals, no repaint.

// Input:
var int n = input.int(10, title="Fractal Periods", minval=2)
//

bool upflagDown = true, bool upflagUp0  = true, bool upflagUp1  = true
bool upflagUp2  = true, bool upflagUp3  = true, bool upflagUp4  = true

for i = 1 to n
    upflagDown := upflagDown and (high[n-i] < high[n])
    upflagUp0 := upflagUp0 and (high[n+i] < high[n])
    upflagUp1 := upflagUp1 and (high[n+1] <= high[n] and high[n+i + 1] < high[n])
    upflagUp2 := upflagUp2 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+i + 2] < high[n])
    upflagUp3 := upflagUp3 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+3] <= high[n] and high[n+i + 3] < high[n])
    upflagUp4 := upflagUp4 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+3] <= high[n] and high[n+4] <= high[n] and high[n+i + 4] < high[n])
flagUp = upflagUp0 or upflagUp1 or upflagUp2 or upflagUp3 or upflagUp4

bool downflagDown = true, bool downflagUp0  = true, bool downflagUp1  = true
bool downflagUp2  = true, bool downflagUp3  = true, bool downflagUp4  = true

for i = 1 to n
    downflagDown := downflagDown and (low[n-i] > low[n])
    downflagUp0  := downflagUp0 and (low[n+i] > low[n])
    downflagUp1  := downflagUp1 and (low[n+1] >= low[n] and low[n+i + 1] > low[n])
    downflagUp2  := downflagUp2 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+i + 2] > low[n])
    downflagUp3  := downflagUp3 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+i + 3] > low[n])
    downflagUp4  := downflagUp4 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+4] >= low[n] and low[n+i + 4] > low[n])
flagDown = downflagUp0 or downflagUp1 or downflagUp2 or downflagUp3 or downflagUp4

bool upfract = upflagDown[1] and flagUp[1]
bool downfract = downflagDown[1] and flagDown[1]

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Auto trendlines

// Input:
var string GROUP_ATL    = "Auto trendlines"
var int LINE_WIDTH1     = 1, var string LINE_WIDTH1_STR = "Width 1"
var int LINE_WIDTH2     = 2, var string LINE_WIDTH2_STR = "Width 2"

var string subgroup1    = "recent line"
var color ln_col_recent = input.color(color.new(color.red, 0), title="Recent Line", group=GROUP_ATL, inline=subgroup1)
int _lnwidth_recent = switch input.string(LINE_WIDTH1_STR, options=[LINE_WIDTH1_STR, LINE_WIDTH2_STR], title="", inline=subgroup1, group=GROUP_ATL)
    LINE_WIDTH1_STR => LINE_WIDTH1
    LINE_WIDTH2_STR => LINE_WIDTH2
var int lnwidth_recent  = _lnwidth_recent

var string subgroup2    = "historical line"
var color ln_col_prev   = input.color(color.new(color.gray, 50), title="Historical Line", group=GROUP_ATL, inline=subgroup2)
int _lnwidth_prev = switch input.string(LINE_WIDTH1_STR, options=[LINE_WIDTH1_STR, LINE_WIDTH2_STR], title="", inline=subgroup2, group=GROUP_ATL)
    LINE_WIDTH1_STR => LINE_WIDTH1
    LINE_WIDTH2_STR => LINE_WIDTH2
var int lnwidth_prev  = _lnwidth_prev

var int max_tl          = input.int(1, title="Max pair of lines", maxval=250, minval=1, group=GROUP_ATL)*2
var string _str_extend  = input.string("Right", options=["Right", "Both ways"], title="Which way to extend lines", group=GROUP_ATL)
var string str_extend   = _str_extend == "Both ways" ? extend.both : extend.right

var bool show_crosses   = input.bool(false, title="Show crosses", tooltip="Instances when closing price of a bar has crossed lower/upper trendlines", group=GROUP_ATL)
//

// Recent fractals.
var float recent_dn1   = low,   var int i_recent_dn1 = bar_index
var float recent_up1   = high,  var int i_recent_up1 = bar_index
var float recent_dn2   = low,   var int i_recent_dn2 = bar_index
var float recent_up2   = high,  var int i_recent_up2 = bar_index

// Array of lines, newest elements inserted to front.
var line[] arr_ln_up = array.new_line() 
var line[] arr_ln_dn = array.new_line()

// @function : Clean up
// @param arr : either arr_ln_up/arr_ln_dn should be passed into it.
// @returns void : To delete excess lines and assign new color to historical lines.
cleanup(line[] arr) =>
    if array.size(arr) > 1
        line.set_color(array.get(arr, 1), ln_col_prev)
        line.set_width(array.get(arr, 1), lnwidth_prev)
        while array.size(arr) > math.floor(max_tl/2)
            line.delete(array.pop(arr)) 

// Checking for fractals & Drawing trendlines
if downfract
    recent_dn2:=recent_dn1
    i_recent_dn2:=i_recent_dn1
    recent_dn1:=low[n+1]
    i_recent_dn1 := bar_index-n-1
    
    ln_dn = line.new(i_recent_dn2, recent_dn2, i_recent_dn1, recent_dn1, xloc.bar_index, str_extend, color=ln_col_recent, style=line.style_dashed, width=lnwidth_recent)
    array.unshift(arr_ln_dn, ln_dn)
    cleanup(arr_ln_dn)

if upfract
    recent_up2:=recent_up1
    i_recent_up2:=i_recent_up1
    recent_up1:=high[n+1]
    i_recent_up1 := bar_index-n-1
    
    ln_up = line.new(i_recent_up2, recent_up2, i_recent_up1, recent_up1, xloc.bar_index, str_extend, color=ln_col_recent, style=line.style_dashed, width=lnwidth_recent)
    array.unshift(arr_ln_up, ln_up) 
    cleanup(arr_ln_up)

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
// Finding crosses

// @function : Get slope
// @param int xA , xB: x values of known points A and B
// @param float yA, yB : y values of known points A and B
// @returns float m : Slope value, commonly expressed as rise over run.
get_slope(xA, yA, xB, yB) =>
    (yB - yA) / (xB - xA)

// Linear extrapolation
// Solving for price at current x (bar_index), given two pairs of fractals with x values < bar_index.
float m_dn = get_slope(i_recent_dn1, recent_dn1, i_recent_dn2, recent_dn2)
float y_dn = (m_dn * bar_index) + recent_dn1 - (m_dn * i_recent_dn1)

float m_up = get_slope(i_recent_up1, recent_up1, i_recent_up2, recent_up2)
float y_up = (m_up * bar_index) + recent_up1 - (m_up * i_recent_up1)
//

bool crossed_top = ta.cross(close, y_up)
bool crossed_bottom = ta.cross(close, y_dn)

plotshape(show_crosses and crossed_top, title = "Crossed upper trendline", style = shape.xcross, location = location.belowbar, color = color.new(color = color.green, transp = 50), size = size.small)
plotshape(show_crosses and crossed_bottom, title = "Crossed lower trendline", style = shape.xcross, location = location.abovebar, color = color.new(color = color.red, transp = 50), size = size.small)

alertcondition(crossed_top or crossed_bottom, title="Upper/lower trendline crossed", message="Upper/lower trendline crossed")
