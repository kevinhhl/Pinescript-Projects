// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© DojiEmoji

//@version=5
indicator("Quartiles with Box Plot [KL]", overlay=true)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Settings
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var int n            = input.int(20, title="Lookback", minval=1)
var int offset       = input.int(5, minval=5, maxval=150, title="Offset: Box Plot", step=5)
float src            = input.source(close, title="Source data")

var string GROUP_1   = "Box plot"
var int ln_width     = input.int(2, title="Width", minval=1, maxval=4, group=GROUP_1)

var string GROUP_2   = "Other plots"
var bool show_hline  = input.bool(true, title="Current quartiles", group=GROUP_2, inline="cq")
var bool show_bands  = input.bool(false, title="Moving quartiles", group=GROUP_2, inline="mq")

var color color1     = input.color(color.blue, title="Box plot", group=GROUP_1)
var color color2     = input.color(color.new(color.blue,0), title="", group=GROUP_2, inline="cq")
var color color3     = input.color(color.new(color.blue,50), title="", group=GROUP_2, inline="mq")

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Quartiles
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//// Original implementation: 
//// ------------------------ {

//// [1] Using an array of float to store newly observed data. New elements inserted at front, dropping out data points that no longer belong to the rolling window on FIFO basis.
////
// var float[] data = array.new_float()
// if array.size(data) == n
//     array.pop(data)
// array.unshift(data, src)

//// [2] Sorting the array so that percentiles can be obtained. But this needs to be done with a deep-copy otherwise FIFO ordering will be lost.
////
// data_sorted = array.copy(data) 
// array.sort(data_sorted)

//// [3] Applying linear interpolation to find 25th, 50th, and 75th percentile values by referring to indices of the sorted array.
////
//// ------------------------ }

// Luckily, no need to reinvent the wheel when Pinescript has a function called percentile_linear_interpolation()
float Q0 = ta.percentile_linear_interpolation(src, n, 0)
float Q1 = ta.percentile_linear_interpolation(src, n, 25)
float Q2 = ta.percentile_linear_interpolation(src, n, 50)
float Q3 = ta.percentile_linear_interpolation(src, n, 75)
float Q4 = ta.percentile_linear_interpolation(src, n, 100)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Drawing Box Plot - to represent the quartiles
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// Objects used:        Representing:
var line ln1 = na       // Median
var line ln2a = na      // Vertical lines for Whiskers
var line ln2b = na      // ''
var line ln3a = na      // ''
var line ln3b = na      // ''
var line ln4q0 = na     // Horizontal lines, marking Q0 to Q4
var line ln4q1 = na     // ''
var line ln4q2 = na     // ''
var line ln4q3 = na     // ''
var line ln4q4 = na     // ''
var box bx1 = na        // IQR

// Clean up, prior iteration
line.delete(ln1[1])
line.delete(ln2a[1])
line.delete(ln2b[1])
line.delete(ln3a[1])
line.delete(ln3b[1])
line.delete(ln4q0[1])
line.delete(ln4q1[1])
line.delete(ln4q2[1])
line.delete(ln4q3[1])
line.delete(ln4q4[1])
box.delete(bx1[1])

// Drawing box and whiskers
ln1 := line.new(bar_index+offset-2, Q2, bar_index+offset+2, Q2, xloc.bar_index, color=color1, width=ln_width)
ln2a := line.new(bar_index+offset, Q1, bar_index+offset, Q0, xloc.bar_index, color=color1, width=ln_width)
ln2b := line.new(bar_index+offset-1, Q0, bar_index+offset+1, Q0, xloc.bar_index, color=color1, width=ln_width)
ln3a := line.new(bar_index+offset, Q3, bar_index+offset, Q4, xloc.bar_index, color=color1, width=ln_width)
ln3b := line.new(bar_index+offset-1, Q4, bar_index+offset+1, Q4, xloc.bar_index, color=color1, width=ln_width)
bx1 := box.new(bar_index+offset-2, Q3, bar_index+offset+2, Q1, border_color=color1, bgcolor=na, border_width=ln_width)

if show_hline
    ln4q0 := line.new(bar_index-n, Q0, bar_index+offset-4, Q0, xloc.bar_index, color=color2, width=1, style=line.style_dotted)
    ln4q1 := line.new(bar_index-n, Q1, bar_index+offset-4, Q1, xloc.bar_index, color=color2, width=1, style=line.style_dotted)
    ln4q2 := line.new(bar_index-n, Q2, bar_index+offset-4, Q2, xloc.bar_index, color=color2, width=1, style=line.style_dotted)
    ln4q3 := line.new(bar_index-n, Q3, bar_index+offset-4, Q3, xloc.bar_index, color=color2, width=1, style=line.style_dotted)
    ln4q4 := line.new(bar_index-n, Q4, bar_index+offset-4, Q4, xloc.bar_index, color=color2, width=1, style=line.style_dotted)

// Q3, Q1, and Q2: Upper/lower bands, and center line, respectively.
plot(Q3, color=show_bands ? color3 : na, title="Q3 Upper band")
plot(Q1, color=show_bands ? color3 : na, title="Q1 Lower band")
plot(Q2, color=show_bands ? color3 : na, title="Q2 Center line")
