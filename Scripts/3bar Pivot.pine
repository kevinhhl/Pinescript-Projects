// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© DojiEmoji

//@version=5
indicator("3Bar Pivot [DojiEmoji]", overlay=true)

//---------------------
// Settings - Adjustable:
var int atr_filter_len = input.int(200, minval=200, inline="ln1", title="Threshold: ATR")
var float atr_filter_multi = input.float(0.5, minval=0.01, maxval=1, step=0.1, inline="ln1", title="x",
 tooltip="The minimum distance that candles [over 3 bars] must 'gap' by in order for move to be considered significant.\n\n-Higher Multi. => Less lines \n-Lower Multi. => More lines (might be noisy)"
 )

var color col_up    = input.color(color.new(color.blue,0), title="Colors for Up move / Down move:", inline="ln2", group="Plots")
var color col_dn    = input.color(color.new(color.red,0), title="/", inline="ln2", group="Plots")
var int linewidth   = input.int(2, minval=1, maxval=9,title="Width of the line", group="Plots")
//---------------------
// Data structures:  
// {

// A) Attributes 
type gap
    float pivot_upper = na
    float pivot_lower = na
    float pivot_mid = na
    color linecolor = na
    int barindex = na

// B) Array of gaps, to keep track of them.
var history = array.new<gap>()

// @function _init(gap)
_init(gap g, float upperbound, float lowerbound, color linecolor) =>
    g.pivot_upper := upperbound
    g.pivot_lower := lowerbound
    g.pivot_mid := (upperbound+lowerbound)/2
    g.linecolor := linecolor
    g.barindex := bar_index
    array.unshift(history, g)

if barstate.isfirst
    array.push(history, gap.new()) // to prevent none type errors at the beginning of size is 0
//}

//---------------------
// Tests for FVGs:
// {

// Requirement 1: Displacement test;        upward FVG must > 0, and downward FVG must < 0
// Requirement 2: Threshold test;           distance of FVG must > ATR200 x 0.5

float displacement_up = low[0] - high[2]  // Test for FVG-up
float displacement_dn = high[0] - low[2]  // Test for FVG-down

// FVG is valid iff both requirements (1 & 2) are met:
float _threshold = ta.atr(atr_filter_len) * atr_filter_multi
if math.abs(displacement_up) > _threshold and displacement_up > 0
    _init(gap.new(), low[0], high[2], col_up)
if math.abs(displacement_dn) > _threshold and displacement_dn < 0
    _init(gap.new(), high[2], low[0], col_dn)
// }

//---------------------
// Plotting:
// {
gap recent_gap = array.get(history,0)
float main_pivot = recent_gap.pivot_mid[0] == recent_gap.pivot_mid[1] ? recent_gap.pivot_mid[0] : na
plot(main_pivot, color=recent_gap.linecolor, linewidth=linewidth, title="Pivot", offset=-1, editable=false, style=plot.style_linebr)
// }

//---------------------
// Alert:
alertcondition(ta.change(main_pivot) != 0, title="FVG up/down", message="New FVG pivot alert")
