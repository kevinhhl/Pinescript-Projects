// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© DojiEmoji

// A tool that automatically draws out trend lines by connecting the most recent fractals.

//@version=5
indicator("Auto Trendline [DojiEmoji]", format=format.price, precision=0, overlay=true, max_lines_count=500)

// ----------------------------------------------------------------------------
// Fractals, implemented using ta.pivot high && low 
// ----------------------------------------------------------------------------

// Inputs:
// {
var string GROUP_FRACT = "Fractals"
var int n = input.int(10, title="Fractal Periods", minval=2, group=GROUP_FRACT)

var color col_hl = input.color(color.blue, title="Plot:", inline="plot_low", group=GROUP_FRACT)
var bool show_hl = input.bool(true, title="HL", inline="plot_low", group=GROUP_FRACT)
var color col_ll = input.color(color.gray, title=", Plot:", inline="plot_low", group=GROUP_FRACT)
var bool show_ll = input.bool(false, title="LL", inline="plot_low", group=GROUP_FRACT)
var color col_lh = input.color(color.red, title="Plot:", inline="plot_high", group=GROUP_FRACT)
var bool show_lh = input.bool(true, title="LH", inline="plot_high", group=GROUP_FRACT)
var color col_hh = input.color(color.gray, title=", Plot:", inline="plot_high", group=GROUP_FRACT)
var bool show_hh = input.bool(false, title="HH", inline="plot_high", group=GROUP_FRACT)
// }

// A Fractal is always a Pivot H/L (but a Pivot H/L is not always a Fractal):
float ph = ta.pivothigh(n, n)[1], bool upfract = not na(ph)
float pl = ta.pivotlow(n, n)[1],  bool downfract = not na(pl)

alertcondition(not na(ph) or not na(pl), title="New trendline formed", message="New trendline formed")

// ----------------------------------------------------------------------------
// Auto trendlines
// ----------------------------------------------------------------------------

// Input:
// {
var string GROUP_ATL    = "Auto trendlines"
var string LINE_WIDTH1_STR = "Width 1"
var string LINE_WIDTH2_STR = "Width 2"
// @function : _get_width(), a map {string:int}
_get_width(string str_input) =>
    return_int = switch str_input
        LINE_WIDTH1_STR => 1
        LINE_WIDTH2_STR => 2
    return_int

var string subgroup1    = "recent line"
var color ln_col_recent = input.color(color.new(color.purple, 0), title="Recent Line", group=GROUP_ATL, inline=subgroup1)
var int lnwidth_recent  = _get_width(input.string(LINE_WIDTH1_STR, options=[LINE_WIDTH1_STR, LINE_WIDTH2_STR], title="", inline=subgroup1, group=GROUP_ATL))
var string subgroup2    = "historical line"
var color ln_col_prev   = input.color(color.new(color.gray, 50), title="Historical Line", group=GROUP_ATL, inline=subgroup2)
var int lnwidth_prev    = _get_width(input.string(LINE_WIDTH1_STR, options=[LINE_WIDTH1_STR, LINE_WIDTH2_STR], title="", inline=subgroup2, group=GROUP_ATL))

var int max_tl          = input.int(1, title="Max pair of lines", maxval=250, minval=1, group=GROUP_ATL)*2
var string _str_extend  = input.string("Right", options=["Right", "Both ways"], title="Which way to extend lines", group=GROUP_ATL)
var string str_extend   = _str_extend == "Both ways" ? extend.both : extend.right

var bool show_crosses   = input.bool(false, title="Show crosses", tooltip="Instances when closing price of a bar has crossed lower/upper trendlines", group=GROUP_ATL)
// }

// Array of lines, newest elements inserted to front.
var line[] arr_ln_up = array.new_line() 
var line[] arr_ln_dn = array.new_line()

// @function _draw_TL()
_draw_TL(x2, y2, x1, y1, arr_ln) =>
    array.unshift(arr_ln,
     line.new(x2, y2, x1, y1, xloc.bar_index, str_extend, color=ln_col_recent, style=line.style_dashed, width=lnwidth_recent))
    // Clean up
    if array.size(arr_ln) > 1
        line.set_color(array.get(arr_ln, 1), ln_col_prev)
        line.set_width(array.get(arr_ln, 1), lnwidth_prev)
        while array.size(arr_ln) > math.floor(max_tl/2)
            line.delete(array.pop(arr_ln))

// Pointers -> Recent fractals
// {
var float recent_dn1   = na,  var int i_recent_dn1 = na
var float recent_up1   = na,  var int i_recent_up1 = na
var float recent_dn2   = na,  var int i_recent_dn2 = na
var float recent_up2   = na,  var int i_recent_up2 = na

if downfract 
    recent_dn2:=recent_dn1, i_recent_dn2 := i_recent_dn1
    recent_dn1:=low[n+1],   i_recent_dn1 := bar_index-n-1
    _draw_TL(i_recent_dn2, recent_dn2, i_recent_dn1, recent_dn1, arr_ln_dn)

if upfract 
    recent_up2:=recent_up1, i_recent_up2 := i_recent_up1
    recent_up1:=high[n+1],  i_recent_up1 := bar_index-n-1
    _draw_TL(i_recent_up2, recent_up2, i_recent_up1, recent_up1, arr_ln_up)

// }

// Plotting fractals
bool hh = upfract and recent_up1 > recent_up2 ? high[n+1] : na
bool lh = upfract and recent_up1 < recent_up2 ? high[n+1] : na
bool hl = downfract and recent_dn1 > recent_dn2 ? low[n+1] : na
bool ll = downfract and recent_dn1 < recent_dn2 ? low[n+1] : na

plotshape(show_hh and hh, style=shape.circle, size=size.tiny, offset=-n-1, title="HH", text="HH", location=location.abovebar, textcolor=col_hh, color=na, editable=false)
plotshape(show_lh and lh, style=shape.circle, size=size.tiny, offset=-n-1, title="LH", text="LH", location=location.abovebar, textcolor=col_lh, color=na, editable=false)
plotshape(show_ll and ll, style=shape.circle, size=size.tiny, offset=-n-1, title="LL", text="LL", location=location.belowbar, textcolor=col_ll, color=na, editable=false)
plotshape(show_hl and hl, style=shape.circle, size=size.tiny, offset=-n-1, title="HL", text="HL", location=location.belowbar, textcolor=col_hl, color=na, editable=false)

// ----------------------------------------------------------------------------
// Finding crosses between closing price & pair of most recent trendlines
// ----------------------------------------------------------------------------

// @function get_slope()
get_slope(xA, yA, xB, yB) =>
    (yB - yA) / (xB - xA)

// Solving for price at current x (bar_index), given two pairs of fractals with x values < bar_index.
float m_dn = get_slope(i_recent_dn1, recent_dn1, i_recent_dn2, recent_dn2)
float y_dn = (m_dn * bar_index) + recent_dn1 - (m_dn * i_recent_dn1)
float m_up = get_slope(i_recent_up1, recent_up1, i_recent_up2, recent_up2)
float y_up = (m_up * bar_index) + recent_up1 - (m_up * i_recent_up1)

// Plotting cross over/under
bool co = ta.cross(close, y_up) 
bool cu = ta.cross(close, y_dn) 
plotshape(show_crosses and co, title = "Crossed upper trendline", style = shape.xcross, 
 location = location.belowbar, color = color.new(color = color.green, transp = 50), size = size.small)
plotshape(show_crosses and cu, title = "Crossed lower trendline", style = shape.xcross, 
 location = location.abovebar, color = color.new(color = color.red, transp = 50), size = size.small)

alertcondition(co or cu, title="Upper/lower trendline crossed", message="Upper/lower trendline crossed")
