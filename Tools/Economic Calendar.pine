// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © DojiEmoji

//@version=5
indicator("Economic Calendar [DojiEmoji]", overlay=true, max_lines_count=500, max_labels_count=500)

// Obtain source data:
//     ie. Source: https://www.fxstreet.com/economic-calendar
//
// Using external tools (ie Excel, Python, etc.), filter the events that you want Pinescript to display.

// 
// This script uses the following standardized string format:
//
//      Format = <date1> <description1> ; <date2> <description2> ;... <date_n> <description_n>
//
//      Where: 'date' is expressed as: YYYY,MM,DD,hh,mm,ss

var string str_input = input.string(title="Data",
 tooltip="Standardized Format = <date1> <description1> ; <date2> <description2> ;... <date_n> <description_n>",
 defval="2022,10,3,14,0,0, - ISM Manufacturing PMI [USD];2022,10,5,12,15,0, - ADP Employment Change [USD];2022,10,5,14,0,0, - ISM Services PMI [USD];2022,10,7,12,30,0, - Nonfarm Payrolls [USD];2022,10,12,18,0,0, - FOMC Minutes [USD];2022,10,13,12,30,0, - Consumer Price Index ex Food & Energy (MoM) [USD];2022,10,13,12,30,0, - Consumer Price Index ex Food & Energy (YoY) [USD];2022,10,14,12,30,0, - Retail Sales (MoM) [USD];2022,10,14,12,30,0, - Retail Sales Control Group [USD];2022,10,14,14,0,0, - Michigan Consumer Sentiment Index [USD];2022,10,27,12,30,0, - Durable Goods Orders [USD];2022,10,27,12,30,0, - Gross Domestic Product Annualized [USD];2022,10,27,12,30,0, - Nondefense Capital Goods Orders ex Aircraft [USD];2022,11,1,14,0,0, - ISM Manufacturing PMI [USD];2022,11,2,12,15,0, - ADP Employment Change [USD];2022,11,2,18,0,0, - Fed Interest Rate Decision [USD];2022,11,2,18,0,0, - Fed's Monetary Policy Statement [USD];2022,11,2,18,30,0, - FOMC Press Conference [USD];2022,11,3,14,0,0, - ISM Services PMI [USD];2022,11,4,12,30,0, - Nonfarm Payrolls [USD];2022,11,10,13,30,0, - Consumer Price Index ex Food & Energy (MoM) [USD];2022,11,10,13,30,0, - Consumer Price Index ex Food & Energy (YoY) [USD];2022,11,11,15,0,0, - Michigan Consumer Sentiment Index [USD];2022,11,16,13,30,0, - Retail Sales (MoM) [USD];2022,11,16,13,30,0, - Retail Sales Control Group [USD];2022,11,23,13,30,0, - Durable Goods Orders [USD];2022,11,23,13,30,0, - Nondefense Capital Goods Orders ex Aircraft [USD];2022,11,23,19,0,0, - FOMC Minutes [USD];2022,11,30,13,15,0, - ADP Employment Change [USD];2022,11,30,13,30,0, - Gross Domestic Product Annualized [USD];2022,12,1,15,0,0, - ISM Manufacturing PMI [USD];2022,12,2,13,30,0, - Nonfarm Payrolls [USD];2022,12,5,15,0,0, - ISM Services PMI [USD];2022,12,9,15,0,0, - Michigan Consumer Sentiment Index [USD];2022,12,13,13,30,0, - Consumer Price Index ex Food & Energy (MoM) [USD];2022,12,13,13,30,0, - Consumer Price Index ex Food & Energy (YoY) [USD];2022,12,14,19,0,0, - Fed Interest Rate Decision [USD];2022,12,14,19,0,0, - Fed's Monetary Policy Statement [USD];2022,12,14,19,0,0, - FOMC Economic Projections [USD];2022,12,14,19,30,0, - FOMC Press Conference [USD];2022,12,15,13,30,0, - Retail Sales (MoM) [USD];2022,12,15,13,30,0, - Retail Sales Control Group [USD];2022,12,22,13,30,0, - Gross Domestic Product Annualized [USD];2022,12,23,13,30,0, - Durable Goods Orders [USD];2022,12,23,13,30,0, - Nondefense Capital Goods Orders ex Aircraft [USD];")

var color linecolor = input.color(color.new(color.yellow,50))
var int linewidth = input.int(2)
var string timezone = input.string("GMT")

var string[] tokens = str.split(str_input,";")
var int[] datetime_events = array.new_int()
var string[] desc_events = array.new_string()

// Helper function:
_process_raw_data() =>
    for i=0 to array.size(tokens)-1

        string[] subtokens = str.split(array.get(tokens,i), ",")
        if array.size(subtokens) > 0
            // Parse
            int yyyy     = int(str.tonumber(array.get(subtokens, 0)))
            int mmm      = int(str.tonumber(array.get(subtokens, 1)))
            int dd       = int(str.tonumber(array.get(subtokens, 2)))
            int hh       = int(str.tonumber(array.get(subtokens, 3)))
            int mm       = int(str.tonumber(array.get(subtokens, 4)))
            int ss       = int(str.tonumber(array.get(subtokens, 5)))
            string desc  = array.get(subtokens, 6)
            
            t = timestamp(timezone, yyyy, mmm, dd, hh, mm, ss)
            line.new(t, close, t, close*1.0001, xloc.bar_time, extend.both, linecolor, width=linewidth)

            // Store
            array.push(datetime_events, t)
            array.push(desc_events, desc)

// Runtime
if barstate.islast and array.size(datetime_events) == 0 
    // Init
    if array.size(datetime_events) == 0
        _process_raw_data()


// TODO: A good way to display upcoming / past events
// Idea is to use labels + tooltips.
// Alternatively, tables, but they take up too much space.
// 

// Display info about next event
var label lbl_info = na//, label.delete(lbl_info)

var int p = 0 // pointer -> index of array (datetime_events); next event

if array.size(datetime_events) > 0
    while(array.get(datetime_events, p) -86400 < time)
        p += 1

    _info = "Next event: " + array.get(desc_events, p)
    if p[0] != p[1]
        lbl_info := label.new(bar_index +10, open, text="ℹ️\n", xloc=xloc.bar_index, yloc=yloc.price, color=na, textalign=text.align_left, tooltip=_info, textcolor=linecolor)
