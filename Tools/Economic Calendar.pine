// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© DojiEmoji

//@version=5
indicator("Economic Calendar [DojiEmoji]", overlay=true, max_lines_count=500, max_labels_count=500)

var int MAX_LINES = 500 // Set it at Pinescript's limit for max. no. of lines draw [500] 

// Obtain source data:
//   ie. Step 1: By obtaining from: https://www.fxstreet.com/economic-calendar
//       Step 2: Using external tools (ie Excel, Python, etc.) to create a line of text that resembles 
//               calendar events.
// 

// This script uses the following standardized format:
//
//     Format = <timezone>;<date1>;<date2>; ... etc, up to the last event on <date_n>
//               Where: 'date' is expressed as: YYYY,MM,DD,hh,mm,ss
//

// ------------------
// Settings:
// ------------------
// {
var string str_input = input.text_area(title="Source Data",
 tooltip="Pasted From external tools (ie. Spreadsheet). A template has been provided in the blog post associated with this script).",
 defval="GMT;2022,6,1,14,0,0;2022,6,2,12,15,0;2022,6,3,12,30,0;2022,6,3,14,0,0;2022,6,3,14,30,0;2022,6,7,14,0,0;2022,6,10,12,30,0;2022,6,10,12,30,0;2022,6,10,14,0,0;2022,6,15,12,30,0;2022,6,15,12,30,0;2022,6,15,18,0,0;2022,6,15,18,0,0;2022,6,15,18,0,0;2022,6,15,18,30,0;2022,6,17,12,45,0;2022,6,22,13,30,0;2022,6,22,18,0,0;2022,6,23,14,0,0;2022,6,23,20,30,0;2022,6,27,12,30,0;2022,6,27,12,30,0;2022,6,29,12,30,0;2022,6,29,13,0,0;2022,7,1,14,0,0;2022,7,6,14,0,0;2022,7,6,18,0,0;2022,7,8,12,30,0;2022,7,13,12,30,0;2022,7,13,12,30,0;2022,7,15,12,30,0;2022,7,15,12,30,0;2022,7,15,14,0,0;2022,7,27,12,30,0;2022,7,27,12,30,0;2022,7,27,18,0,0;2022,7,27,18,0,0;2022,7,27,18,30,0;2022,7,28,12,30,0;2022,8,1,14,0,0;2022,8,2,23,30,0;2022,8,3,14,0,0;2022,8,5,12,30,0;2022,8,10,12,30,0;2022,8,10,12,30,0;2022,8,12,14,0,0;2022,8,17,12,30,0;2022,8,17,12,30,0;2022,8,17,18,0,0;2022,8,24,12,30,0;2022,8,24,12,30,0;2022,8,25,12,30,0;2022,8,25,14,0,0;2022,8,26,14,0,0;2022,8,26,14,0,0;2022,8,27,14,0,0;2022,8,31,12,15,0;2022,8,31,12,15,5;2022,8,31,12,15,10;2022,9,1,14,0,0;2022,9,2,12,30,0;2022,9,6,14,0,0;2022,9,8,13,10,0;2022,9,13,12,30,0;2022,9,13,12,30,0;2022,9,15,12,30,0;2022,9,15,12,30,0;2022,9,16,14,0,0;2022,9,21,18,0,0;2022,9,21,18,0,0;2022,9,21,18,0,0;2022,9,21,18,30,0;2022,9,23,18,0,0;2022,9,27,11,30,0;2022,9,27,12,30,0;2022,9,27,12,30,0;2022,9,28,14,15,0;2022,9,29,12,30,0;2022,10,3,14,0,0;2022,10,5,12,15,0;2022,10,5,14,0,0;2022,10,7,12,30,0;2022,10,12,18,0,0;2022,10,13,12,30,0;2022,10,13,12,30,0;2022,10,14,12,30,0;2022,10,14,12,30,0;2022,10,14,14,0,0;2022,10,27,12,30,0;2022,10,27,12,30,0;2022,10,27,12,30,0;2022,11,1,14,0,0;2022,11,2,12,15,0;2022,11,2,18,0,0;2022,11,2,18,0,0;2022,11,2,18,30,0;2022,11,3,14,0,0;2022,11,4,12,30,0;2022,11,10,13,30,0;2022,11,10,13,30,0;2022,11,11,15,0,0;2022,11,16,13,30,0;2022,11,16,13,30,0;2022,11,23,13,30,0;2022,11,23,13,30,0;2022,11,23,19,0,0;2022,11,30,13,15,0;2022,11,30,13,30,0;2022,11,30,18,30,0;2022,12,1,15,0,0;2022,12,2,13,30,0;2022,12,5,15,0,0;2022,12,9,15,0,0;2022,12,13,13,30,0;2022,12,13,13,30,0;2022,12,14,19,0,0;2022,12,14,19,0,0;2022,12,14,19,0,0;2022,12,14,19,30,0;2022,12,15,13,30,0;2022,12,15,13,30,0;2022,12,22,13,30,0;2022,12,23,13,30,0;2022,12,23,13,30,0;")

var int linewidth   = input.int(2, title="Width of line", minval=1, maxval=5)
var color linecolor = input.color(color.new(color.yellow,50))
// }

// ------------------
// Drawing lines:
// ------------------
// {
var string[] tokens = str.split(str_input,";")
var string timezone = array.get(tokens, 0)
var int[] timestamps = na

// @function : get_timestamps 
// @returns array of int : Date of Events in Unix time, sorted.
get_timestamps() =>

    int[] return_arr_time = array.new_int()

    // First element is reserved for 'timezone'
    for i=1 to array.size(tokens)-1

        string[] subtokens = str.split(array.get(tokens,i), ",")
        if array.size(subtokens) > 0
            // Parse
            int yyyy     = int(str.tonumber(array.get(subtokens, 0)))
            int mmm      = int(str.tonumber(array.get(subtokens, 1)))
            int dd       = int(str.tonumber(array.get(subtokens, 2)))
            int hh       = int(str.tonumber(array.get(subtokens, 3)))
            int mm       = int(str.tonumber(array.get(subtokens, 4)))
            int ss       = int(str.tonumber(array.get(subtokens, 5)))
            
            array.push(return_arr_time, timestamp(timezone, yyyy, mmm, dd, hh, mm, ss))

    array.sort(return_arr_time)
    return_arr_time

// }



// MAIN:
// {
if barstate.isfirst
    
    str_input := str.replace_all(str_input, " ", "") // Strip out all empty spaces.
    
    if str_input == ""
        runtime.error(message = "Source data is empty.")

if barstate.islast and na(timestamps)
    timestamps := get_timestamps()
    _n = array.size(timestamps) 
        
    // Assert: int[] timestamps sorted by chronological order
    // Iterate through most recent 'MAX_LINES'=500 events; fail-safe approach to ensure most recent lines get drawn (ignore oldest events when n > 500)
    for i=math.max(0, _n - MAX_LINES)  to _n-1
        t = array.get(timestamps, i)
        line.new(t, close, t, close*1.0001, xloc.bar_time, extend.both, linecolor, width=linewidth)
// }
